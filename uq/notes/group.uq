
-- Group是虚拟的群定义，folder of Group 才是某个人的实体，装小单的
MAP GroupX (
	KEY group ID Note,
	unit ID Note,				-- 定义群属于某个机构
);

MAP UnitX (
	KEY unit ID Note,
	tonvaUnit ID,				-- 跟tonva机构对应的值
);

-- 包含了所有的Group成员
MAP GroupFolder (
	KEY group ID Note,			-- NoteType=group
	KEY member ID [$User],
	folder ID Note,				-- NoteType=groupFolder
	role TINYINT DEFAULT 0, 	-- 0: 普通, 1: owner, 2: admin
	state TINYINT DEFAULT 1,	-- 1:正常，0:删除
	INDEX folder (folder) UNIQUE,
);

ACTION AddGroup (
	caption CHAR(200),				-- 群名字
	content TEXT,					-- 说明
	ARR members (
		member ID [$User],
	),
)
RETURNS ret (
	group ID,
	folder ID,
) {
	VAR groupId ID, folderId ID, specFolderId ID, seconds INT;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);
	TUID Note INTO groupId SET type=EnumNoteType.Group, caption=caption, content=content, owner=$user;

	-- 建立自己的Group Folder
	TUID Note INTO folderId SET type=EnumNoteType.GroupFolder, caption=caption, content=content, owner=$user;
	BOOK GroupFolder AT(groupId, $user) SET folder=folderId;
	SET specFolderId=folder FROM SpecFolder WHERE owner=$user AND spec=EnumSpecFolder.notes;
	IF specFolderId IS NULL {
		TUID Note INTO specFolderId SET owner=$user, type=EnumNoteType.Folder;
		BOOK SpecFolder AT($user, EnumSpecFolder.notes) SET folder=specFolderId;
	}
	BOOK FolderNote AT(specFolderId, folderId) SET seconds=seconds;
	TUID [$User] ID ($user) SET poke=1;

	-- 建立其它成员的Group Folder
	FOREACH members {
		var memberFolderId ID;
		SET specFolderId=NULL;  --必须在循环开始时清空
		SET specFolderId=folder FROM SpecFolder WHERE owner=member AND spec=EnumSpecFolder.notes;
		IF specFolderId IS NULL {
			TUID Note INTO specFolderId SET owner=member, type=EnumNoteType.Folder;
			BOOK SpecFolder AT(member, EnumSpecFolder.notes) SET folder=specFolderId;
		}
		TUID Note INTO memberFolderId SET type=EnumNoteType.GroupFolder, caption=caption, content=content, owner=member;
		BOOK GroupFolder AT(groupId, member) SET folder=memberFolderId;
		BOOK FolderNote AT(specFolderId, memberFolderId) SET seconds=seconds;
		TUID [$User] ID (member) SET poke=1;
	}
	INTO ret SELECT groupId as [group], folderId as folder;
};

ACTION SetGroupProp(
	groupId ID,
	prop TINYINT,				-- 1: caption, 2: content
	value TEXT,
) {
	IF exists(SELECT id FROM Note WHERE owner=$user AND id=groupId AND type=EnumNoteType.Group) {
		IF prop=1 {
			TUID Note ID groupId SET caption=value;
		}
		ELSEIF prop=2 {
			TUID Note ID groupId SET content=value;
		}
	}
};

ACTION AddGroupMember (
	group ID Note,
	member ID [$User],
) {
	IF exists(SELECT id FROM Note WHERE owner=$user AND id=[group] AND type=EnumNoteType.Group) {
		VAR folderId ID, specFolderId ID, caption CHAR(200), content TEXT, seconds INT;
		SET folderId=a.folder FROM GroupFolder as a WHERE a.group=group AND a.member=member;
		IF folderId IS NULL {
		SET specFolderId=folder FROM SpecFolder WHERE owner=member AND spec=EnumSpecFolder.notes;
			IF specFolderId IS NULL {
				TUID Note INTO specFolderId SET owner=member, type=EnumNoteType.Folder;
				BOOK SpecFolder AT(member, EnumSpecFolder.notes) SET folder=specFolderId;
			}
			SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);
			SET caption=a.caption, content=a.content FROM Note as a WHERE a.id=group;
			TUID Note INTO folderId SET type=EnumNoteType.GroupFolder, caption=caption, content=content, owner=member;
			BOOK GroupFolder AT(group, member) SET folder=folderId;
			BOOK FolderNote AT(specFolderId, folderId) SET seconds=seconds;
			TUID [$User] ID (member) SET poke=1;
		}
	}
};

ACTION RemoveGroupMember (
	group ID Note,
	member ID [$User],
) {
	IF exists(SELECT id FROM Note WHERE owner=$user AND id=[group] AND type=EnumNoteType.Group) {
		-- TUID Note ID group SET x=1;
	}
};
