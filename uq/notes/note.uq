ENUM EnumNoteType (Text=0, Task=1);

-- type: 根据type，分配给特定的程序
TUID Note (
	id,
	main type SMALLINT DEFAULT 0,		-- Note类, EnumNoteType
	main caption CHAR(200),				-- 标题
	main content TEXT,					-- 内容，格式根据type而定，json
	main owner ID [$User],				-- 所有者
	main x TINYINT DEFAULT 0,			-- 删除标志
	main from ID [$User],				-- 派生来源人
	stamp (create, update) main,
);

TAG NoteTag;

MAP NoteTagMap (
	KEY note ID Note,
	KEY tag TAG NoteTag,
	INDEX tag_note(tag, note) unique,
);

-- Note 操作中附件的信息
MAP FLOW (
	KEY note ID Note,
	KEY flow SMALLINT DEFAULT 0,		-- 不断附加的id，跟操作相关
	from ID [$User],
	to TEXT,							-- comman seperated to list
	attach TEXT,						-- 附加信息，json
);

-- ENUM EnumNoteFlag (None=0, Pin=1, Archive=2);

-- flag, end 主要控制 RNote 本身的操作
-- state由特定程序定义，是json
MAP NoteX (
	KEY note ID Note,
	-- type SMALLINT DEFAULT 0,			-- Note类, EnumNoteType
	-- sub SMALLINT DEFAULT 0,				-- Note类下面的小类，比如，todo-start, todo-doing, done, pass, fail, rated
	-- flag TINYINT DEFAULT 0,				-- EnumNoteFlag
	end TINYINT DEFAULT 0,				-- 1: end, can be archive
	state TEXT,							-- 由特定程序自己定义的特定的当前状态，json
	-- to TEXT,							-- 逗号分隔的to user id list
);

MAP FolderNote (
	KEY folder ID Folder,
	KEY note ID Note,
	type SMALLINT DEFAULT 0,			-- Note类, EnumNoteType
	-- sub SMALLINT DEFAULT 0,				-- Note类下面的小类，比如，todo-start, todo-doing, done, pass, fail, rated
	seconds INT,						-- seconds since 2020-1-1
	index folder_seconds(folder, seconds),
	index note_folder(note, folder) unique,
);

ENUM EnumNoteMapType (Spawn=0, Born=1, Contain=2)
MAP Note2Note (
	KEY note0 ID Note,
	KEY note1 ID Note,
	type TINYINT DEFAULT 0,				-- NoteMapType
);

MAP NoteAccess (
	KEY note ID Note,
	KEY user ID [$User],
	access TINYINT DEFAULT 0,				-- 1 表示允许
);

ACTION AddNote (
	caption CHAR(200),
	content TEXT,
	type SMALLINT,
	-- sub SMALLINT,
)
RETURNS ret (
	note ID Note,
) {
	VAR noteId ID, folderId ID, seconds INT;
	TUID Note INTO noteId SET type=type, caption=caption, content=content, owner=$user;
	SET folderId=folder FROM SpecFolder WHERE owner=$user AND spec=EnumSpecFolder.notes;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);
	BOOK FolderNote AT (folderId, noteId) SET seconds=seconds, type=type; -- , sub=sub;
	-- BOOK NoteAccess AT (noteId, $user) SET access=1; access不应该包括owner
	FOREACH (var noteFolderId ID OF SELECT folder as noteFolderId FROM FolderNote WHERE note=noteId) {
		IF noteFolderId<>folderId {
			BOOK FolderNote AT(noteFolderId, noteId) SET seconds=seconds, type=type; -- , sub=sub;
		}
	}
	-- BOOK NoteX AT(noteId) SET type=0;
	INTO ret SELECT noteId as note;
};

ACTION SetNote (
	note ID,
	caption CHAR(200),
	content TEXT,
	-- type SMALLINT,
	-- sub SMALLINT,
) {
	VAR noteId ID, folderId ID, seconds INT;
	TUID Note ID note SET caption=caption, content=content;
	SET noteId = note;
	SET folderId=folder FROM SpecFolder WHERE owner=$user AND spec=EnumSpecFolder.notes;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);
	BOOK FolderNote AT(folderId, noteId) SET seconds=seconds; -- , type=type, sub=sub;
	FOREACH (var noteFolderId ID OF SELECT folder as noteFolderId FROM FolderNote WHERE note=noteId) {
		IF noteFolderId<>folderId {
			BOOK FolderNote AT(noteFolderId, noteId) SET seconds=seconds;
		}
	}
};

ACTION SendNoteTo (
	note ID,
	tos TEXT,
) {
	VAR seconds INT;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);
	TABLE tblTo(to ID);
	TEXT tos sep=',' ln='|' INTO tblTo;
	BOOK NoteAccess AT (note, *) SET access=0;
	FOREACH (var to ID OF SELECT to FROM tblTo) {
		VAR folderId ID;
		SET folderId = folder FROM SpecFolder WHERE owner=to AND spec=EnumSpecFolder.notes;
		IF folderId IS NULL {
			TUID Folder INTO folderId SET owner=to;
			BOOK SpecFolder AT(to, EnumSpecFolder.notes) SET folder=folderId;
		}
		BOOK FolderNote AT(folderId, note) SET seconds=seconds;
		BOOK NoteX AT(note) SET to=tos; -- type=0, 
		BOOK NoteAccess AT (note, to) SET access=1;
	};
};
