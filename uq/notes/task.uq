ENUM EnumTaskState (Start=0, Done=1, Pass=2, Fail=3, Rated=4, Canceled=5, Error=-1);
ENUM EnumTaskAction (Start=0, Done=1, Check=2, Rate=3);

MAP Task (
	KEY note ID Note,
	checker ID [$User],
	rater ID [$User],
	point INT,
);

ACTION AssignTask ver 1.0 (
	note ID NOTE,
	caption CHAR(200),
	content TEXT,
	checker ID [$User],
	rater ID [$User],
	point INT,
	ARR tos (
		to ID [$User]
	),
) {
	VAR seconds INT;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);
	FOREACH tos {
		VAR taskId ID, folderId ID;
		SET folderId = folder FROM SpecFolder WHERE owner=to AND spec=EnumSpecFolder.notes;
		IF folderId IS NULL {
			TUID Folder INTO folderId SET owner=to;
			BOOK SpecFolder AT(to, EnumSpecFolder.notes) SET folder=folderId;
		}
		TUID Note INTO taskId SET type=EnumNoteType.task, caption=caption, content=content, owner=to, from=$user;
		BOOK Task AT(taskId) SET checker=checker, rater=rater, point=point;
		BOOK NoteX AT(taskId) SET state=EnumTaskState.Start;
		BOOK FolderNote AT(folderId, taskId) SET seconds=seconds, type=EnumNoteType.task, unread=1;
		BOOK Note2Note AT(note, taskId) SET type=EnumNoteMapType.Spawn;
		BOOK Note2Note AT(taskId, note) SET type=EnumNoteMapType.Born;
		TUID [$User] ID (to) SET poke=1;
	};
};

ACTION DoneTask (
	note ID NOTE,
	content TEXT,		-- json
)
RETURNS ret (
	toState TINYINT
) {
	VAR seconds INT;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);

	VAR flowId SMALLINT, checker ID, rater ID, point INT, folderId ID, state TINYINT;
	SET checker=a.checker, rater=a.rater, point=a.point, state=b.state
		FROM Task as a LEFT JOIN NoteX as b ON a.note=b.note
		WHERE a.note=note;
	IF state=EnumTaskState.Start {
		BOOK NoteX AT(note) SET state=EnumTaskState.Done, flowContent=content;
		SET flowId=(SELECT ifnull(max(a.flow), 0)+1 FROM Flow as a WHERE a.note=note);
		BOOK Flow AT(note, flowId) SET content=content, operator=$user, action=EnumTaskAction.Done;
		IF NOT checker IS NULL {
			SET folderId = folder FROM SpecFolder WHERE owner=checker AND spec=EnumSpecFolder.notes;
			TUID [$User] ID (checker) SET poke=1;
		}
		ELSEIF NOT rater IS NULL {
			SET folderId = folder FROM SpecFolder WHERE owner=rater AND spec=EnumSpecFolder.notes;
			TUID [$User] ID (rater) SET poke=1;
		}
		IF NOT folderId IS NULL {
			BOOK FolderNote AT(folderId, note) SET seconds=seconds, type=EnumNoteType.task, unread=1;
		}
		INTO ret SELECT EnumTaskState.Done as toState;
	}
	ELSE {
		INTO ret SELECT EnumTaskState.Error as toState;
	}
};

ACTION CheckTask (
	note ID Note,
	action TINYINT,		-- 1: pass，2: fail
	content TEXT,  		-- json
)
RETURNS ret (
	toState TINYINT
) {
	VAR seconds INT;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);

	VAR flowId SMALLINT, owner ID, checker ID, rater ID, point INT, folderId ID, state INT;
	SET checker=a.checker, rater=a.rater, point=a.point, state=b.state, owner=c.owner
		FROM Task as a LEFT JOIN NoteX as b ON a.note=b.note
		LEFT JOIN Note as c ON a.note=c.id
		WHERE a.note=note;
	IF state=EnumTaskState.Done AND $user=checker {
		IF action=1 {
			SET state=EnumTaskState.Pass;
		}
		else {
			SET state=EnumTaskState.Fail;
		}
		IF NOT checker IS NULL {
			BOOK NoteX AT(note) SET state=state, flowContent=content;
			SET flowId=(SELECT ifnull(max(a.flow), 0)+1 FROM Flow as a WHERE a.note=note);
			BOOK Flow AT(note, flowId) SET content=content, operator=$user, action=EnumTaskAction.Check;
			IF NOT rater IS NULL {
				SET folderId = folder FROM SpecFolder WHERE owner=rater AND spec=EnumSpecFolder.notes;
				BOOK FolderNote AT(folderId, note) SET seconds=seconds, type=EnumNoteType.task, unread=1;
				TUID [$User] ID (rater) SET poke=1;
			}
			TUID [$User] ID (owner) SET poke=1;
			-- Task owner Folder 需要更新
			-- SET folderId = folder FROM SpecFolder WHERE owner= AND spec=EnumSpecFolder.notes;
		}
		INTO ret SELECT state as toState;
	}
	ELSE {
		INTO ret SELECT EnumTaskState.Error as toState;
	}
};

ACTION RateTask (
	note ID Note,
	value INT,			-- 分值
	content TEXT,  		-- json
) {
	VAR seconds INT;
	SET seconds=TIMESTAMPDIFF(second, '2020-1-1', $date);

	VAR flowId SMALLINT, owner ID, checker ID, rater ID, point INT, folderId ID;
	SET checker=a.checker, rater=a.rater, point=a.point, owner=c.owner
		FROM Task as a LEFT JOIN Note as c ON a.note=c.id
		WHERE a.note=note;
	IF NOT checker IS NULL {
		BOOK NoteX AT(note) SET state=EnumTaskState.Rated, flowContent=content;
		SET flowId=(SELECT ifnull(max(a.flow), 0)+1 FROM Flow as a WHERE a.note=note);
		BOOK Flow AT(note, flowId) SET content=content, operator=$user, action=EnumTaskAction.Rate;
		IF NOT rater IS NULL {
			SET folderId = folder FROM SpecFolder WHERE owner=rater AND spec=EnumSpecFolder.notes;
			BOOK FolderNote AT(folderId, note) SET seconds=seconds, type=EnumNoteType.task, unread=1;
		}
		TUID [$User] ID (owner) SET poke=1;
		TUID [$User] ID (checker) SET poke=1;
		-- Task owner Folder 需要更新
		-- SET folderId = folder FROM SpecFolder WHERE owner= AND spec=EnumSpecFolder.notes;
		-- Task checker Folder 需要更新
		-- SET folderId = folder FROM SpecFolder WHERE owner= AND spec=EnumSpecFolder.notes;
	}
};
